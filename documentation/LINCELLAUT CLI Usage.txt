To make certain tasks easier, LINCELLAUT comes with lincellaut.c which compiles to a program which can be run from the command line. Common linear algebra and LCA tasks were put into this program so that an entire program doesn't need to be created just to do some simple task. To see how to use lincellaut on the CLI, just run lincellaut on the CLI with no arguments. 

The following is a list of all the currently available tasks within lincellaut.c. Square brackets around an argument denote optional arguments. Note that an asterisk (*) before the tool name specifies that "unix-like" command line arguments can be used, using key-value pairs in any order instead of positional arguments. For example, the following two calls to orbitmaps2 are equivalent:

lincellaut orbitmaps2 3 5 TRUE 

lincellaut orbitmaps2 -modulus 5 -fileoutput TRUE -maxpower 3

If the user attempts to use "unix-like" arguments with tools that don't support it, LINCELLAUT will notify the user and exit.


iterate [iterations]: This tool allows you to take an initial matrix and iterate it by an update matrix multiple times. If no other arguments are passed, lincellaut defaults to using the "iterations" value present in the program's .config file. 
 - The optional argument "iterations" can be provided to override the value of iterations provided in the .config file. This argument expects an integer. Using a negative integer will get LINCELLAUT to compute the inverse of the update matrix and iterate that the specified number of times (e.g. an iteration count of -3 will iterate the inverse matrix 3 times, if it exists).

inverse [modulus]: This tool allows you to find the inverse of the matrix specified as the update matrix in the .config file under the specified modulus.
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

chara [modulus]: This tool allows the user to find the characteristic equation of the update matrix under some modulus. 
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

allcharas coeffs...: This tool allows the user to find all matrices with a particular characteristic polynomial defined as command line arguments. The size of the matrices is determined by the number of coefficients added, so adding zeros is required to pad the polynomial to the correct length. 
 - The argument(s) "coeffs" specify the coefficents to use for the characteristic polynomial, entered from the constant term to the coefficient on the highest power term. For example, the characteristic polynomial 5 + x^2 + 2x^3 would be entered as "5 0 1 2".

orbits [modulus] [fileoutput]: This tool allows the user to calculate the orbits of a particular matrix and print them to the console. This tool can also create an output file containing the orbits. The filename will be "orbits <modulus> F<matrix>.txt"
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.
 - The optional argument "fileoutput" says whether the tool should create an output file. This argument expects TRUE or FALSE as its value. The default value is FALSE.

splitorbits [modulus] [fileoutput]: This tool allows the user to calculate the orbits of a given matrix and modulus over the splitting field of the matrix's minimal polynomial. 
 - The optional argument "modulus" overrides the modulus used in the .config file. This argument expects a positive integer greater than 1.
 - The optional argument "fileoutput" specifies whether the program should output a text file with the orbits. The file will be created under the name "splitorbits F<matrix> <modulus>.txt". The default value of this argument is FALSE. This argument expects TRUE or FALSE.

orbitreps [modulus] [fileoutput]: This tool takes the given update matrix and finds a representative from all its orbits, along with their respective cycle lengths. The tool also creates a text file with the name "orbitreps [modulus] F[matrix].txt" which saves the found vectors and their cycle lengths. This tool assumes the modulus used is a prime number.
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.
 - The optional argument "fileoutput" says whether to output a text file with the found representative vectors. This argument expects a TRUE or FALSE. By default, this option is set to FALSE.

branchreps [modulus]: This tool takes the given update matrix and finds a representative from all its transient branches. The tool also creates a text file with the name "branchreps [modulus] F[matrix].txt" which saves the found vectors.
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

orbitspaces (UNFINISHED) [modulus] [minpolys] [fileoutput]: This tool allows users to calculate all unique orbit spaces within a given LCA, i.e. all submodules of the form span({v, Av, (A^2)v, ...}) where v is a vector and A is the update matrix.
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.
 - The optional argument "minpolys" specifies whether to calculate the relevant minimal polynomial attached to each cyclespace. Currently, this only works with prime moduli. This argument expects TRUE or FALSE as its value. The default value is FALSE.
 - The optional argument "fileoutput" specifies whether to record the tool's output to a text file. The file will be created with the name "orbitspaces F<matrix> <mod>.txt". This argument expects TRUE or FALSE as its value. The default value is FALSE.

floyd [modulus]: This tool allows the user to calculate specific info about an LCA system, such as the matrix's cycle length and the transient length, using Floyd's Cycle Detection Algorithm. The tool makes use of the initial and update matrices specified in the .config file as its parameters.
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

cycmatsearch resume size maxmod cycles...: This tool allows the user to search for a matrix of a given size where the column vectors all have specified cycle lengths. The found matrices and their modulus are then output into a text file in the working directory following the naming convention "cycmatsearch <size> <maxmod> <cycles...>.txt". 
 - "resume" specifies whether to resume computation at the given resume matrix. The tool will also resume searching at the modulus provided in the config file. This argument expects TRUE or FALSE as its value.
 - "size" specifies how big of a matrix should be used. For instance, if 3 is input, then matrices of size 3x3 will be searched. This argument expects a positive integer.
 - "maxmod" specifies the upper bound for the moduli to search. Searching will always begin at mod 2. This argument expects a positive integer.
 - "cycles..." is a list of cycle lengths for the first column vector, the second, and so on. These arguments expect positive integers.

cycconvmat from to [mod]: This tool allows the user to create a "cycle converting matrix" for the given update matrix. If A is the update matrix, this tool outputs the matrix:

I + A^(to) + A^(2*to) + A^(3*to) + ... + A^(from-to)

 - "from" specifies the cycle lengths you want to convert from. Any vector which has a cycle length under the update matrix which divides this number will work with the resulting matrix. This argument expects a positive integer.
 - "to" specifies what cycle length to "convert" vectors to with the matrix. It guarantees that any vector multiplied by the resulting matrix will have a cycle length that divides this number when iterated by the update matrix. This argument expects a positive integer.
 - The optional argument "mod" allows the user to override the modulus provided in the .config file. This argument expects a positive integer greater than 1.

ccmzerosearch resume size [mod]: This tool allows the user to search for matrices of a specific size that have cycle converting matrices (CCMs) equalling the zero matrix, even if nonzero vectors dividing the corresponding cycle length exist. This tool also outputs a text file with the name format "ccmzerosearch [size] [mod].txt" which saved all found matrices.
 - "resume" tells the tool whether to start computation at the resume matrix provided in the .config file. This argument expects TRUE or FALSE as its value.
 - "size" tells the tool what size matrices to look at. This argument expects a positive integer.
 - The optional argument "mod" allows the user to override the modulus provided in the .config file. This argument expects a positive integer greater than 1.

vectprops [mod] [resume] [fileoutput]: This tool allows the user to iterate through all possible vectors in a given LCA and calculate what their "minimal" annihilating polynomials are.
 - The optional argument "mod" allows the user to override the modulus provided in the .config file. This argument expects a positive integer greater than 1.
 - The optional argument "resume" tells the tool whether to start computation at the resume matrix provided in the .config file. This argument expects TRUE or FALSE as its value.
 - The optional argument "fileoutput" specifies whether to record the tool's output to a text file. The file will be created with the name "vectprops F<matrix> <mod>.txt". This argument expects TRUE or FALSE as its value. The default value is FALSE.

vectpolys (UNFINISHED) degree baseMod modPower [fileoutput]: This tool allows the user to calculate the generators for the initial vector's ideal of annihilating polynomials under a particular update matrix (the update matrix listed in the .config file) up to a certain degree.
 - The argument "degree" specifies the highest degree polynomial to look for. This argument expects a positive integer.
 - The argument "baseMod" specifies the base for the modulus to use. This argument expects a prime number.
 - The argument "modPower" specifies the exponent for the modulus to use. This argument expects an integer greater than 0.
 - The optional argument "fileoutput" specifies whether the tool should create an output file of all the polynomials found. The output file will have the name "vectpolys F<matrix> D<degree> <mod>.txt". The default value for this argument is FALSE. This argument expects TRUE or FALSE as its value.

matprops maxpower [modulus]: This tool allows the user to calculate some useful properties of a given matrix (the update matrix specified in the .config file). Currently, it calculates equivalent expressions for matrix powers in terms of lower powers using the characteristic polynomial of the matrix.
 - The argument "maxpower" specifies the highest power to rewrite. If this value is less than the first power able to be simplified, nothing will be output. This argument expects a positive integer.
 - The optional argument "modulus" allows the user to override the modulus provided in the .config file. This argument expects a positive integer greater than 1.

charawalk (DEPRECATED) step [mod]: This tool steps around a matrix space (each element of the matrix constitutes a direction in which to walk) using the specified step size and computes the characteristic polynomial for each matrix it lands on (and factors the polynomial, too).
 - "step" specifies the step size to take. This argument expects a positive integer.
 - The optional argument "mod" overrides the modulus provided in the .config file. This argument expects a positive integer.

fibmultsearch [bound]: This tool allows the user to search the Fibonacci numbers to see if each number in a range of numbers has their first multiple in the Fibonacci sequence (not including zero) also be their first multiple of their square that appears.
 - The optional argument "bound" allows the user to set a custom upper bound on the numbers to check. By default, the upper bound is set to 100. This argument expects a positive integer (can be arbitrarily big).

dynamics [maxPower] [modulus] [allConfigs] [fileoutput]: This tool allows the user to iterate every vector in a space to get their cycle lengths. It then recomputes those numbers for higher-powered moduli. The tool also outputs a text file under the name "dynamics [maxPower] [modulus] F[matrix].txt" containing all the vectors in each cycle length group (when allConfigs is FALSE).
 - The argument "maxPower" defines the highest exponent to use for the powered modulus. The default value is 2. This argument expects a positive integer.
 - The optional argument "modulus" allows the user to override the modulus specified in the .config file. This argument expects a positive integer greater than 1.
 - The optional argument "allConfigs" specifies whether the program should find all possible configurations for the dynamics of the given matrix and all its lifts. When set to TRUE, an output file will not be created. This argument expects the value TRUE or FALSE. The default value is FALSE.
 - The optional argument "fileoutput" specifies whether the program should output a datafile (currently only applicable when allConfigs is FALSE). This argument expects TRUE or FALSE. The default is FALSE.

orbitmaps (DEPRECATED) maxpower [modulus] [fileoutput]: This tool allows the user to generate orbit representatives (and the respective cycle lengths) for some high-power modulus, then map how these orbits reduce down to orbits of lower-powered moduli.
 - The argument "maxpower" specifies the highest (initial) power to use for the modulus. This argument expects a positive integer.
 - The optional argument "modulus" allows the user to override the modulus specified in the .config file. This argument expects a positive integer greater than 1.
 - The optional argument "fileoutput" specifies whether the tool's output should be saved to a file (naming convention "orbitmaps [maxpower] [modulus] F[matrix].txt"). This also determines whether the program should output a .graph file for use with GRAPHVIS. This argument expects TRUE or FALSE. The default value is FALSE.

*orbitmaps2 maxpower [modulus] [fileoutput] [belowBound] [aboveBound]: This tool uses a slightly different approach to orbitmaps in order to find orbit representatives for some high-power modulus and then map them down to orbit representatives for the lower-power moduli. Specifically, if two orbits reduce to the same cycle, their orbit representatives will reduce to the same representative. As well, this tool calculates the orbit maps for ALL lifts of the given update matrix, not just the one matrix given.
If quiet mode is active, this tool will only output data regarding the number of unique orbit mapping structures found, both on the console and in its output files.
The tool sifts through matrices in the following way:
1. Start with the given matrix. Perform relevant calculations.

2. Increment the highest lift of the matrix. For example, if our starting matrix is
1 1
1 0, 
our base modulus is 2, and the max power is 3, then the first lift will be
5 1
1 0, 
the second will be
1 5
1 0, 
etc.

3. Once all lifts at the highest level have been exhaused, the next lowest lift is incremented. For the example above, after all highest level lifts are checked, the next matrix to be considered will be
3 1
1 0.

4. Now, the highest lifts will be incremented again using the lift from the next level down. In the example above, the next two matrices to be considered would be
7 1
1 0,

3 5
1 0.

5. Repeat the above process for all lift levels until all matrices have been cycled through. This matrix ordering was chosen so as to facilitate the division of the output data into sensible chunks.
 - The argument "maxpower" specifies the highest exponent to use for the modulus. This argument expects a positive integer.
 - The optional argument "modulus" allows the user to override the modulus specified in the .config file. This argument expects a positive integer greater than 1.
 - The optional argument "fileoutput" specifies whether the tool's output should be saved to files (naming convention "orbitmaps2 [maxpower] [modulus] F[matrix] f[file number].txt" and "orbitmaps2 maps [maxpower] [modulus] F[matrix].txt"). The tool splits up output into a different file for each time the lowest level lift matrix changes (e.g. if our modulus is 2 and the max power is 4, then each time the lift matrix mod 2^2 changes, a new file will be made). This argument expects TRUE or FALSE. The default value is FALSE.
 - The optional argument "belowBound" specifies whether the program should resume computation at a particular matrix given by the resume matrix in the config file. This argument expects TRUE or FALSE as its value. The default value is FALSE.
 - The optional argument "aboveBound" specifies whether computation should stop at a particular matrix given by the sentinel matrix in the config file. It's the user's responsibility to ensure that the sentinel matrix is computed after the resume matrix. Otherwise, the program will run until all matrices have been computed. This argument expects TRUE or FALSE as its value. The default value is FALSE.

oddminpolysearch maxpower size polysize [modulus] [resume] [fileoutput]: This tool allows the user to sift through all annihilating polynomials of all matrices under a given modulus to check if any of them ARE NOT multiples of the minimal annihilating polynomial of the same matrix.
 - The argument "maxpower" specifies the highest power of the modulus to check. This argument expects a positive integer.
 - The argument "size" says what size matrix we want to use. This argument expects a positive integer greater than 1.
 - The argument "polysize" specifies the maximum size of polynomials to check for annihilating polynomials. For instance, if this number is 3, the program will check up to quadratic polynomials. This argument expects a positive integer.
 - The optional argument "modulus" allows the user to override the modulus specified in the .config file. This argument expects a positive integer greater than 1.
 - The optional argument "resume" specifies whether to resume computation at a particular matrix (given by resume.matrix) and a particular modulus (specified in the .config file). This argument expects TRUE or FALSE.
 - The optional argument "fileoutput" specifies whether the tool should create a file output of the results it finds. The name of the file will follow the format "oddminpolysearch <maxpower> <size> <polysize> <modulus>.txt". The default value of this argument is FALSE. This argument expects TRUE or FALSE as it value.
 
stablelift baseMod modPower: This tool allows the user to find a lift of a given matrix modulo baseMod^(modPower + 1) whose cycle length stays the same in the higher modulus. For this tool to work, the cycle length of the matrix must have been the same for all previous moduli.
 - The argument "baseMod" specifies the base of the modulus to use. This argument expects a prime number greater than 1.
 - The argument "modPower" specifies the exponent of the modulus to use. This argument expects a positive integer.
 
2023 (TEMPORARY): This tool takes the initial matrix specified in the .config file and calculates a matrix representation of its cyclespace under the given update matrix (also specified in the .config file). This tool will most likely be merged with "vectpolys" in the future.

2024 [prime] (TEMPORARY): This tool looks at all CCMs of the form C_{ab -> a} for a given matrix and checks whether all vectors that are eigenvectors for the CMM with eigenvalue b have cycle lengths that divide a.
 - The optional argument "prime" specifies whether the modulus used is prime or not. If it is, then some computational shortcuts can be used to speed up the tool. Currently, it's unknown whether these shortcuts actually speed up the program or not. This argument expects TRUE or FALSE. The default value is FALSE.
