To make certain tasks easier, LINCELLAUT comes with lincellaut.c, which compiles to a program which can be run from the command line. Common linear algebra and LCA tasks were put into this program so that an entire program doesn't need to be created just to do some simple task. To see how to use lincellaut on the CLI, just run lincellaut on the CLI with no arguments. 

The following is a list of all the currently available tasks within lincellaut.c.

iterate [iterations]: This tool allows you to take an initial matrix and iterate it by an update matrix multiple times. If no other arguments are passed, lincellaut defaults to using the "iterations" value present in the program's .config file. 
 - The optional argument "iterations" can be provided to override the value of iterations provided in the .config file. This argument expects an integer. Using a negative integer will get LINCELLAUT to compute the inverse of the update matrix and iterate that the specified number of times (e.g. an iteration count of -3 will iterate the inverse matrix 3 times, if it exists).

inverse [modulus]: This tool allows you to find the inverse of the matrix specified as the update matrix in the .config file under the specified modulus.
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

det [modulus]: This tool allows the user to calculate the determinant of the update matrix mod some modulus. 
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

chara [modulus]: This tool allows the user to find the characteristic equation of the update matrix under some modulus. 
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

floyd [modulus]: This tool allows the user to calculate specific info about an LCA system, such as the matrix's cycle length and the transient length, using Floyd's Cycle Detection Algorithm. The tool makes use of the initial and update matrices specified in the .config file as its parameters.
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

bigfloyd [modulus]: This tool is the same as floyd, except it makes use of BigIntMatrixT structs instead of IntMatrixT structs, allowing for bigger examples to be calculated.
 - The optional argument "modulus" overrides the modulus found in the .config file. This argument expects a positive integer.

rots [modulus]: This tool allows you to output basic rotation matrices for the given modulus to the screen. Currently, this tool outputs the 45 degree and 30 degree rotation matrices.
 - The optional argument "modulus" allows you to override the modulus specified in the .config file. This argument expects a positive integer.

cycmatsearch size maxmod cycles...: This tool allows the user to search for a matrix of a given size where the column vectors all have specified cycle lengths. The found matrices and their modulus are then output into a text file in the working directory following the naming convention "cycmatsearch <size> <maxmod> <cycles...>.txt".
 - "size" specifies how big of a matrix should be used. For instance, if 3 is input, then matrices of size 3x3 will be searched. This argument expects a positive integer.
 - "maxmod" specifies the upper bound for the moduli to search. Searching will always begin at mod 2. This argument expects a positive integer.
 - "cycles..." is a list of cycle lengths for the first column vector, the second, and so on. These arguments expect positive integers.

fibcycle [modulus]: This tool allows you to generate the Fibonacci cycle which contains the given initial vector (in the initial vector file given in the .config file) and print it to the CLI. A Fibonacci cycle is a cycle where the vectors get iterated by the update matrix:

2 2
1 1
1 0

in .matrix format. This specific update matrix has its own tools since each iteration can be computed more efficiently than by using general matrix multiplication.
 - The optional argument "modulus" allows the user to override the modulus specified in the .config file. This argument expects a positive integer.

fibcyclelens [modulus]: This tool allows you to calculate all possible Fibonacci cycle lengths for the used modulus and print them to the CLI.
 - The option argument "modulus" allows you to override the modulus provided in the .config file. This argument expects a positive integer (tehcnically, it expects a BigIntT, but for all intents and purposes the user can treat this like an arbitrarily large integer).

fibmultsearch [bound]: This tool allows the user to search the Fibonacci numbers to see if each number in a range of numbers has their first multiple in the Fibonacci sequence (not including zero) also be their first multiple of their square that appears.
 - The optional argument "bound" allows the user to set a custom upper bound on the numbers to check. By default, the upper bound is set to 100. This argument expects a positive integer (can be arbitrarily big).

dynamics [power1] [power2] [modulus]: This tool allows the user to iterate every vector in a space to get their cycle lengths and transient lengths. It then recomputes those numbers for higher-powered moduli.
 - The argument "power1" defines the lower exponent to use for the powered modulus. The default value is 1. This argument expects a positive integer.
 - The argument "power2" defines the higher exponent to use for the powered modulus. The default value is 2. This argument expects a positive integer.
 - The optional argument "modulus" allows the user to override the modulus specified in the .config file. This argument expects a positive integer.