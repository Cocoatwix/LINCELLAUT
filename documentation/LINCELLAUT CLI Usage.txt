To make certain tasks easier, LINCELLAUT comes with lincellaut.c, which compiles to a program which can be run from the command line. Common linear algebra and LCA tasks were put into this program so that an entire program doesn't need to be created just to do some simple task. To see how to use lincellaut on the CLI, just run lincellaut on the CLI with no arguments. 

The following is a list of all the currently available tasks within lincellaut.c.

iterate [iterations] : This tool allows you to take an update matrix and iterate it by itself multiple times. If no other arguments are passed, lincellaut defaults to using the "iterations" value present in the program's .config file (see .config file specs for more information). 
 - The optional argument "iterations" can be provided to override the value of iterations provided in the .config file. This argument expects a positive integer. 

fibcycle [modulus]: This tool allows you to generate the Fibonacci cycle which contains the given initial vector (in the initial vector file given in the .config file) and print it to the CLI. A Fibonacci cycle is a cycle where the vectors get iterated by the update matrix:

2 2
1 1
1 0

in .matrix format. This specific update matrix has its own tools since each iteration can be computed more efficiently than by using general matrix multiplication.
 - The optional argument "modulus" allows the user to override the modulus specified in the .config file. This argument expects a positive integer.

fibcyclelens [modulus] : This tool allows you to calculate all possible Fibonacci cycle lengths for the used modulus and print them to the CLI.
 - The option argument "modulus" allows you to override the modulus provided in the .config file. This argument expects a positive integer (tehcnically, it expects a BigIntT, but for all intents and purposes the user can treat this like an arbitrarily large integer).

fibmultsearch [bound]: This tool allows the user to search the Fibonacci numbers to see if each number in a range of numbers has their first multiple in the Fibonacci sequence (not including zero) also be their first multiple of their square that appears.
 - The optional argument "bound" allows the user to set a custom upper bound on the numbers to check. By default, the upper bound is set to 100. This argument expects a positive integer (can be arbitrarily big).