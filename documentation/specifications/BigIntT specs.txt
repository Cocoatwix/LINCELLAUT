BigIntT structs are a simple arbitrary precision integer library for computing large examples that regular integer datatypes can't handle easily. This struct and its functions are far from perfectly optimised, but they're certainly usable for computing large calculations without switching to Python, which is the intent.

BigIntT structs are essentially an integer array, where each integer (called a bunch) in the array represents a digit in a base 100000000 number. Base 100000000 was chosen so as to make printing the numbers to the screen much easier while also balancing memory consumption and computational efficiency. 

Bunches are stored in little endian style, meaning the least significant bunches are stored first in the array. This makes computations and magnitude changes much easier. BigIntT structs also keep track of how many bunches they're currently holding.

BigIntT structs do not currently support negative numbers; this is something the user will have to manage themselves. BigIntT structs are also only capable of being integers (as is specified in their name). There's currently no plan to make a corresponding arbitrary precision double struct for this project, as LINCELLAUT was created to be used for modular arithmetic.

To perform addition and subtraction, the classic school algorithm is used. Multiplication, division, and reducing by a modulus (getting the remainder from division) are all programmed by way of repeated addition and subtraction. Division, for instance, sees how many times one can subtract the denominator from the numerator before going into the negatives.

To make the calculation a little less arduous, the arithmetic functions make their best effort in adding/subtracting multiples of the relevant quantity so as to spend less time on the lower level operations and more time keeping track of the higher level operations. This is usually done by ensuring multiples of the quantity are relatively the same magnitude as the other relevant quantity.